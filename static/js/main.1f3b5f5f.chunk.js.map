{"version":3,"sources":["actions/index.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","components/Link.js","containers/FilterLink.js","components/Footer.js","components/App.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","serviceWorker.js","containers/login.js","components/apps.js","index.js"],"names":["nextTodoId","VisibilityFilters","connect","dispatch","input","className","onSubmit","e","text","preventDefault","value","trim","type","id","ref","el","Todo","onClick","completed","style","textDecoration","TodoList","todos","toggleTodo","map","todo","key","getVisibleTodos","filter","task","Error","state","visibilityFilter","Link","active","children","disabled","marginLeft","ownProps","Footer","FilterLink","App","VisibleTodoList","action","combineReducers","Boolean","window","location","hostname","match","history","useHistory","placeholder","push","Apps","exact","path","component","Loginrequest","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f3b5f5f.chunk.js","sourcesContent":["let nextTodoId = 0;\n\nexport const addTodo = text => ({\n  type: 'ADD_TODO',\n  id: nextTodoId++,\n  text\n});\n\n\nexport const toggleTodo = id => ({\n  type: 'TOGGLE_TODO',\n  id\n});\n\nexport const VisibilityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\n};\n\nexport const setVisibilityFilter = filter => ({\n  type: 'SET_VISIBILITY_FILTER',\n  filter\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo } from '../actions';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './style.css'\n\nconst AddTodo = ({ dispatch }) => {\n  let input;\n\n  return (\n    <div className=\"container-fluid\">\n      <div><h1 className=\"head \">TODO APP</h1></div>\n      <div className=\"heading\">\n\n        <h4>PLEASE ENTER A TASK BELOW</h4>\n      </div>\n      <form className=\" fstyle form-inline \"\n        onSubmit={\n          e => {\n            e.preventDefault();\n\n            if (!input.value.trim()) {\n              return\n            }\n\n            dispatch(addTodo(input.value));\n            input.value = '';\n          }\n        }\n      ><br /><br />\n        <div className=\"dat\">\n        <input className=\"textbox\" type=\"text\" ref={el => (input = el)} />\n        <button className=\"btn btn-primary add\" type='submit'>Add Todo</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default connect()(AddTodo);\n","import React from 'react';\n\nconst Todo = ({ onClick, completed, text }) => (\n  <li className=\"list-items\"\n    onClick={onClick}\n    style={{\n      textDecoration: completed ? 'line-through' : 'none'\n    }}\n  >\n    {text}\n  </li>\n);\n\nexport default Todo;","import React from 'react';\nimport Todo from './Todo';\nimport \"../containers/style.css\"\n\nconst TodoList = ({ todos, toggleTodo }) => (\n  <ul className=\"todolist\">\n    {todos.map(todo => (\n      <Todo key={todo.id} {...todo} onClick={() => toggleTodo(todo.id)} />\n    ))}\n  </ul>\n);\n\nexport default TodoList;","import { connect } from 'react-redux';\nimport { VisibilityFilters, toggleTodo } from '../actions'\nimport TodoList from '../components/TodoList';\n\nconst getVisibleTodos = (todos, filter) => {\n  switch (filter) {\n    case VisibilityFilters.SHOW_ALL:\n      return todos;\n    case VisibilityFilters.SHOW_COMPLETED:\n      return todos.filter(task => task.completed);\n    case VisibilityFilters.SHOW_ACTIVE:\n      return todos.filter(task => !task.completed);\n    default:\n      throw new Error('Unknown filter: ' + filter);\n  }\n}\n\nconst mapStateToProps = state => ({\n  todos: getVisibleTodos(state.todos, state.visibilityFilter)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleTodo: id => dispatch(toggleTodo(id))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList);","import React from 'react';\n\nconst Link = ({ active, onClick, children }) => (\n  <button className=\"btn btn-primary\"\n    onClick={onClick}\n    disabled={active}\n    style={{\n      marginLeft: '4px'\n    }}\n  >\n    {children}\n  </button>\n);\n\nexport default Link;","import { connect } from 'react-redux';\nimport { setVisibilityFilter } from '../actions';\nimport Link from '../components/Link';\n\nconst mapStateToProps = (state, ownProps) => ({\n  active: ownProps.filter === state.visibilityFilter\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  onClick: () => dispatch(setVisibilityFilter(ownProps.filter))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Link);","import React from 'react';\nimport FilterLink from '../containers/FilterLink';\nimport { VisibilityFilters } from '../actions';\nimport \"../containers/style.css\"\n\nconst Footer = () => (\n  <div className=\"footer\">\n    <span>Filter: </span>\n    <FilterLink filter={VisibilityFilters.SHOW_ALL}>All</FilterLink>\n    <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Active</FilterLink>\n    <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>Completed</FilterLink>\n  </div>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport AddTodo from \"../containers/AddTodo\";\nimport VisibleTodoList from \"../containers/VisibleTodoList\";\nimport Footer from \"./Footer\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nconst App = () => (\n  <div>\n    \n    <AddTodo />\n    <Footer />\n    <VisibleTodoList />\n  </div>\n);\n\nexport default App;\n","const todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false\n        }\n      ];\n    case 'TOGGLE_TODO':\n      return state.map(todo =>\n          todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\n        );\n    default:\n      return state;\n  }\n}\n\nexport default todos;","import { VisibilityFilters } from '../actions';\n\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter;\n    default:\n      return state;\n  }\n}\n\nexport default visibilityFilter;","import { combineReducers } from 'redux';\nimport todos from './todos';\nimport visibilityFilter from './visibilityFilter';\n\n\nexport default combineReducers({\n  todos,\n  visibilityFilter,\n\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './style.css'\r\n\r\n\r\nconst Loginrequest = () => {\r\n    const history = useHistory();\r\n\r\n    const routeChange = () => {\r\n        let path = `/App`;\r\n        history.push(path);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <form>\r\n\r\n                <div className=\"login\">\r\n                    <h1 className=\" headings\">Login here !</h1><br />\r\n                    <input type=\"text\" className=\"u\" placeholder=\"USERNAME\" /><p></p>\r\n                    <input type=\"password\" className=\"p\" placeholder=\"PASSWORD\" /><br /><br />\r\n                    <butoon className=\"button btn btn-primary\" onClick={routeChange}>LOG IN</butoon>\r\n                    <div className=\"foot\">\r\n                    <h5> © 2020 All Rights Reserved.</h5>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </form>\r\n        </div >\r\n    )\r\n\r\n}\r\nexport default connect()(Loginrequest);\r\n","import React from 'react';\r\nimport App from \"./App\";\r\nimport Loginrequest from \"../containers/login\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\"\r\n\r\n\r\nconst Apps = () => (\r\n    <div>\r\n        <BrowserRouter>\r\n\r\n            <Switch>\r\n                <Route exact path=\"/\" component={Loginrequest} />\r\n                <Route path=\"/App\" component={App} />\r\n\r\n            </Switch>\r\n        </BrowserRouter>\r\n    </div>\r\n);\r\n\r\nexport default Apps;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Apps from './components/apps';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Apps />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}